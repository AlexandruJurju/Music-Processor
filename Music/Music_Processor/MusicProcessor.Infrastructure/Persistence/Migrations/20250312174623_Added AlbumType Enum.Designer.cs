// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MusicProcessor.Infrastructure.Persistence;

#nullable disable

namespace MusicProcessor.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250312174623_Added AlbumType Enum")]
    partial class AddedAlbumTypeEnum
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.1");

            modelBuilder.Entity("MusicProcessor.Domain.Entities.Albums.Album", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("AlbumType")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("album_type");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("TEXT")
                        .HasColumnName("date_modified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_albums");

                    b.ToTable("albums", (string)null);
                });

            modelBuilder.Entity("MusicProcessor.Domain.Entities.Artits.Artist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("TEXT")
                        .HasColumnName("date_modified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_artists");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_artists_name");

                    b.ToTable("artists", (string)null);
                });

            modelBuilder.Entity("MusicProcessor.Domain.Entities.GenreCategories.GenreCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("TEXT")
                        .HasColumnName("date_modified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_genre_categories");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_genre_categories_name");

                    b.ToTable("genre_categories", (string)null);
                });

            modelBuilder.Entity("MusicProcessor.Domain.Entities.Genres.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("TEXT")
                        .HasColumnName("date_modified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<bool>("RemoveFromSongs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnName("remove_from_songs");

                    b.HasKey("Id")
                        .HasName("pk_genres");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_genres_name");

                    b.ToTable("genres", (string)null);
                });

            modelBuilder.Entity("MusicProcessor.Domain.Entities.Songs.Song", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int?>("AlbumId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("album_id");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasColumnName("comment");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("TEXT")
                        .HasColumnName("date_modified");

                    b.Property<double>("Duration")
                        .HasColumnType("REAL")
                        .HasColumnName("duration");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("file_path");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("file_type");

                    b.Property<int?>("GenreCategoryId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("genre_category_id");

                    b.Property<int>("MainArtistId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("main_artist_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("title");

                    b.Property<int>("TrackNumber")
                        .HasColumnType("INTEGER")
                        .HasColumnName("track_number");

                    b.Property<int?>("Year")
                        .HasColumnType("INTEGER")
                        .HasColumnName("year");

                    b.HasKey("Id")
                        .HasName("pk_songs");

                    b.HasIndex("AlbumId")
                        .HasDatabaseName("ix_songs_album_id");

                    b.HasIndex("GenreCategoryId")
                        .HasDatabaseName("ix_songs_genre_category_id");

                    b.HasIndex("MainArtistId")
                        .HasDatabaseName("ix_songs_main_artist_id");

                    b.HasIndex("Title")
                        .HasDatabaseName("ix_songs_title");

                    b.ToTable("songs", (string)null);
                });

            modelBuilder.Entity("genre_genre_category", b =>
                {
                    b.Property<int>("GenreCategoriesId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("genre_categories_id");

                    b.Property<int>("GenresId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("genres_id");

                    b.HasKey("GenreCategoriesId", "GenresId")
                        .HasName("pk_genre_genre_category");

                    b.HasIndex("GenresId")
                        .HasDatabaseName("ix_genre_genre_category_genres_id");

                    b.ToTable("genre_genre_category", (string)null);
                });

            modelBuilder.Entity("song_artists", b =>
                {
                    b.Property<int>("ArtistsId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("artists_id");

                    b.Property<int>("SongsId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("songs_id");

                    b.HasKey("ArtistsId", "SongsId")
                        .HasName("pk_song_artists");

                    b.HasIndex("SongsId")
                        .HasDatabaseName("ix_song_artists_songs_id");

                    b.ToTable("song_artists", (string)null);
                });

            modelBuilder.Entity("song_genres", b =>
                {
                    b.Property<int>("GenresId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("genres_id");

                    b.Property<int>("SongsId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("songs_id");

                    b.HasKey("GenresId", "SongsId")
                        .HasName("pk_song_genres");

                    b.HasIndex("SongsId")
                        .HasDatabaseName("ix_song_genres_songs_id");

                    b.ToTable("song_genres", (string)null);
                });

            modelBuilder.Entity("MusicProcessor.Domain.Entities.Songs.Song", b =>
                {
                    b.HasOne("MusicProcessor.Domain.Entities.Albums.Album", "Album")
                        .WithMany("Songs")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_songs_albums_album_id");

                    b.HasOne("MusicProcessor.Domain.Entities.GenreCategories.GenreCategory", null)
                        .WithMany("Songs")
                        .HasForeignKey("GenreCategoryId")
                        .HasConstraintName("fk_songs_genre_categories_genre_category_id");

                    b.HasOne("MusicProcessor.Domain.Entities.Artits.Artist", "MainArtist")
                        .WithMany()
                        .HasForeignKey("MainArtistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_songs_artists_main_artist_id");

                    b.Navigation("Album");

                    b.Navigation("MainArtist");
                });

            modelBuilder.Entity("genre_genre_category", b =>
                {
                    b.HasOne("MusicProcessor.Domain.Entities.GenreCategories.GenreCategory", null)
                        .WithMany()
                        .HasForeignKey("GenreCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_genre_genre_category_genre_categories_genre_categories_id");

                    b.HasOne("MusicProcessor.Domain.Entities.Genres.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_genre_genre_category_genres_genres_id");
                });

            modelBuilder.Entity("song_artists", b =>
                {
                    b.HasOne("MusicProcessor.Domain.Entities.Artits.Artist", null)
                        .WithMany()
                        .HasForeignKey("ArtistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_song_artists_artists_artists_id");

                    b.HasOne("MusicProcessor.Domain.Entities.Songs.Song", null)
                        .WithMany()
                        .HasForeignKey("SongsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_song_artists_songs_songs_id");
                });

            modelBuilder.Entity("song_genres", b =>
                {
                    b.HasOne("MusicProcessor.Domain.Entities.Genres.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_song_genres_genres_genres_id");

                    b.HasOne("MusicProcessor.Domain.Entities.Songs.Song", null)
                        .WithMany()
                        .HasForeignKey("SongsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_song_genres_songs_songs_id");
                });

            modelBuilder.Entity("MusicProcessor.Domain.Entities.Albums.Album", b =>
                {
                    b.Navigation("Songs");
                });

            modelBuilder.Entity("MusicProcessor.Domain.Entities.GenreCategories.GenreCategory", b =>
                {
                    b.Navigation("Songs");
                });
#pragma warning restore 612, 618
        }
    }
}
