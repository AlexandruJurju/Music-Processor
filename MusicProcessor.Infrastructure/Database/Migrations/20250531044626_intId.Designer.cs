// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MusicProcessor.Infrastructure.Database;

#nullable disable

namespace MusicProcessor.Infrastructure.Database.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250531044626_intId")]
    partial class intId
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("ArtistSong", b =>
                {
                    b.Property<int>("ArtistsId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("artists_id");

                    b.Property<int>("SongId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("song_id");

                    b.HasKey("ArtistsId", "SongId")
                        .HasName("pk_artist_song");

                    b.HasIndex("SongId")
                        .HasDatabaseName("ix_artist_song_song_id");

                    b.ToTable("artist_song", (string)null);
                });

            modelBuilder.Entity("GenreStyle", b =>
                {
                    b.Property<int>("GenresId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("genres_id");

                    b.Property<int>("StyleId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("style_id");

                    b.HasKey("GenresId", "StyleId")
                        .HasName("pk_genre_style");

                    b.HasIndex("StyleId")
                        .HasDatabaseName("ix_genre_style_style_id");

                    b.ToTable("genre_style", (string)null);
                });

            modelBuilder.Entity("MusicProcessor.Domain.Albums.Album", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("MainArtistId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("main_artist_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_albums");

                    b.HasIndex("MainArtistId")
                        .HasDatabaseName("ix_albums_main_artist_id");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_albums_name");

                    b.ToTable("albums", (string)null);
                });

            modelBuilder.Entity("MusicProcessor.Domain.Artists.Artist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_artists");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_artists_name");

                    b.ToTable("artists", (string)null);
                });

            modelBuilder.Entity("MusicProcessor.Domain.Genres.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_genres");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_genres_name");

                    b.ToTable("genres", (string)null);
                });

            modelBuilder.Entity("MusicProcessor.Domain.Songs.Song", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("AlbumId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("album_id");

                    b.Property<int>("DiscCount")
                        .HasColumnType("INTEGER")
                        .HasColumnName("disc_count");

                    b.Property<int>("DiscNumber")
                        .HasColumnType("INTEGER")
                        .HasColumnName("disc_number");

                    b.Property<int>("Duration")
                        .HasColumnType("INTEGER")
                        .HasColumnName("duration");

                    b.Property<string>("Isrc")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("TEXT")
                        .HasColumnName("isrc");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("key");

                    b.Property<int>("MainArtistId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("main_artist_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("title");

                    b.Property<int>("TrackNumber")
                        .HasColumnType("INTEGER")
                        .HasColumnName("track_number");

                    b.Property<int>("TracksCount")
                        .HasColumnType("INTEGER")
                        .HasColumnName("tracks_count");

                    b.Property<uint>("Year")
                        .HasColumnType("INTEGER")
                        .HasColumnName("year");

                    b.HasKey("Id")
                        .HasName("pk_songs");

                    b.HasIndex("AlbumId")
                        .HasDatabaseName("ix_songs_album_id");

                    b.HasIndex("Isrc")
                        .HasDatabaseName("ix_songs_isrc");

                    b.HasIndex("Key")
                        .HasDatabaseName("ix_songs_key");

                    b.HasIndex("MainArtistId")
                        .HasDatabaseName("ix_songs_main_artist_id");

                    b.HasIndex("Title")
                        .HasDatabaseName("ix_songs_title");

                    b.HasIndex("Year")
                        .HasDatabaseName("ix_songs_year");

                    b.ToTable("songs", (string)null);
                });

            modelBuilder.Entity("MusicProcessor.Domain.Styles.Style", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("INTEGER")
                        .HasColumnName("soft_deleted");

                    b.HasKey("Id")
                        .HasName("pk_styles");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_styles_name");

                    b.ToTable("styles", (string)null);
                });

            modelBuilder.Entity("SongStyle", b =>
                {
                    b.Property<int>("SongId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("song_id");

                    b.Property<int>("StylesId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("styles_id");

                    b.HasKey("SongId", "StylesId")
                        .HasName("pk_song_style");

                    b.HasIndex("StylesId")
                        .HasDatabaseName("ix_song_style_styles_id");

                    b.ToTable("song_style", (string)null);
                });

            modelBuilder.Entity("ArtistSong", b =>
                {
                    b.HasOne("MusicProcessor.Domain.Artists.Artist", null)
                        .WithMany()
                        .HasForeignKey("ArtistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_artist_song_artists_artists_id");

                    b.HasOne("MusicProcessor.Domain.Songs.Song", null)
                        .WithMany()
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_artist_song_songs_song_id");
                });

            modelBuilder.Entity("GenreStyle", b =>
                {
                    b.HasOne("MusicProcessor.Domain.Genres.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_genre_style_genres_genres_id");

                    b.HasOne("MusicProcessor.Domain.Styles.Style", null)
                        .WithMany()
                        .HasForeignKey("StyleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_genre_style_styles_style_id");
                });

            modelBuilder.Entity("MusicProcessor.Domain.Albums.Album", b =>
                {
                    b.HasOne("MusicProcessor.Domain.Artists.Artist", "MainArtist")
                        .WithMany()
                        .HasForeignKey("MainArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_albums_artists_main_artist_id");

                    b.Navigation("MainArtist");
                });

            modelBuilder.Entity("MusicProcessor.Domain.Songs.Song", b =>
                {
                    b.HasOne("MusicProcessor.Domain.Albums.Album", "Album")
                        .WithMany()
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_songs_albums_album_id");

                    b.HasOne("MusicProcessor.Domain.Artists.Artist", "MainArtist")
                        .WithMany()
                        .HasForeignKey("MainArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_songs_artists_main_artist_id");

                    b.OwnsOne("MusicProcessor.Domain.Songs.SpotifyMetadata", "SpotifyMetadata", b1 =>
                        {
                            b1.Property<int>("SongId")
                                .HasColumnType("INTEGER")
                                .HasColumnName("id");

                            b1.Property<string>("SpotifyAlbumId")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("TEXT")
                                .HasColumnName("spotify_metadata_spotify_album_id");

                            b1.Property<string>("SpotifyArtistId")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("TEXT")
                                .HasColumnName("spotify_metadata_spotify_artist_id");

                            b1.Property<string>("SpotifyCoverUrl")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("TEXT")
                                .HasColumnName("spotify_metadata_spotify_cover_url");

                            b1.Property<string>("SpotifySongId")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("TEXT")
                                .HasColumnName("spotify_metadata_spotify_song_id");

                            b1.Property<string>("SpotifyUrl")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("TEXT")
                                .HasColumnName("spotify_metadata_spotify_url");

                            b1.HasKey("SongId");

                            b1.ToTable("songs");

                            b1.WithOwner()
                                .HasForeignKey("SongId")
                                .HasConstraintName("fk_songs_songs_id");
                        });

                    b.Navigation("Album");

                    b.Navigation("MainArtist");

                    b.Navigation("SpotifyMetadata");
                });

            modelBuilder.Entity("SongStyle", b =>
                {
                    b.HasOne("MusicProcessor.Domain.Songs.Song", null)
                        .WithMany()
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_song_style_songs_song_id");

                    b.HasOne("MusicProcessor.Domain.Styles.Style", null)
                        .WithMany()
                        .HasForeignKey("StylesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_song_style_styles_styles_id");
                });
#pragma warning restore 612, 618
        }
    }
}
